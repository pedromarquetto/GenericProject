@page "/ItemControlPage"

@using Newtonsoft.Json
@rendermode @(new InteractiveAutoRenderMode(false))
@attribute [StreamRendering]

@inject WebServiceConnection _ws;
@inject NavigationManager _navig;

@if (items?.Count() > 0 && fieldsList?.Count() > 0)
{
    <CustomDiv Class="divCard1 border"
               Visible="@(_companyManager.CompanyConfig?.IsShowScreenName)"
               DivType="3">
        <div class="divChildCard1">
            <h3>@screen?.Name</h3>
        </div>
    </CustomDiv>

	<div class="customContainer">

        <CustomDiv Class="divCard1"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "btnNew")?.IsVisible)">
            <div class="divChildCard1">
                <button class="btn btn-outline-info" @onclick="@(() => NavigateToDetail(0))">@fieldsList.FirstOrDefault(p => p.Xname == "btnNew")?.Name</button>
            </div>
        </CustomDiv>

        <CustomDiv Class="divCard1"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtSearch")?.IsVisible)">
            <div class="divChildCard1">
                <label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtSearch")?.Name</label>
            </div>
            <div class="divChildCard1">
                <input @bind="filter" @bind:event="oninput" @bind:after="FilterItems" />
            </div>
        </CustomDiv>
        <CustomDiv Class="divCard2"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtSearch")?.IsVisible)">
            <div class="divChildCard1">
                <label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtSearch")?.Name</label>
            </div>
            <div class="divChildCard1">
                <input @bind="filter" @bind:event="oninput" @bind:after="FilterItems" />
            </div>
        </CustomDiv>

        <QuickGrid Items="@filteredItems">
            @foreach (var field in fieldsList)
            {
                @if (field.IsVisible)
                {
                    switch (field.Xname)
                    {
                        case "gridCol_Id":
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.ItemId)" />
                            break;
                        case "gridCol_Name":
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.Name)" />
                            break;
                        case "gridCol_ItemTypeId":
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.ItemTypeId)" />
                            break;
                        case "gridCol_ItemCategoryId":
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.ItemCategoryId)" />
                            break;
                        case "gridCol_Description":
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.Description)" />
                            break;
                        case "gridCol_Price":
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.Price)" />
                            break;
                        case "gridCol_SpecialPrice":
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.SpecialPrice)" />
                            break;
                        case "gridCol_IsActive":
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.IsActive)" />
                            break;
                        case var colName when colName.StartsWith("gridCol_Generic"):
                            var genericNumber = int.Parse(colName.Substring(14)); // 14 is the length of "gridCol_Generic"
                            <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.GetType().GetProperty($"Generic{genericNumber}").GetValue(p))" />
                            break;
                        case "gridCol_ButtonDetail":
                            <TemplateColumn Title="@field.Name">
                                <div>
                                    <button class="btn btn-outline-info" @onclick="@(() => NavigateToDetail(context.ItemId))">@fieldsList.FirstOrDefault(p => p.Xname == "gridCol_ButtonDetail")?.Name</button>
                                </div>
                            </TemplateColumn>
                            break;
                        default:
                            // Trate outros casos se necessário
                            break;
                    }
                }
            }
        </QuickGrid>
	</div>
}
else
{
    <CustomDiv DivType="4" Class="divCard1" />
}

@code {
    public IQueryable<Item> items { get; set; }
    public IQueryable<Item> filteredItems { get; set; }
    public string filter { get; set; } = "";

    private SystemScreen screen { get; set; }
    private List<SystemScreenField> fieldsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        items = filteredItems = await GlobalHelper.GetTableData(_ws, items, "Item");//To change
        (fieldsList, screen) = await GlobalHelper.GetScreenFields(_ws, "ItemControlPage");//To change
    }

    private void FilterItems()
    {
        filteredItems = items;
        filteredItems = string.IsNullOrEmpty(filter) == false ? filteredItems.Where(p => p.Name.ToLower().Contains(filter.ToLower())) : filteredItems;
    }

    private void NavigateToDetail(int id)
    {
        var navOption = id != 0 ? $"/ItemMaintenance/{id}" : $"/ItemMaintenance";//To change
        _navig.NavigateTo(navOption);
    }
}
