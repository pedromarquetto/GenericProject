@page "/SystemScreenFieldMaitenancePage/{Id:int}/{SystemScreenName}"

@rendermode @(new InteractiveAutoRenderMode(false))
@attribute [StreamRendering]


<CustomDiv Visible="@IsVisible" DivType="@DivType" Class="divCard" Id="lblErrorMessage">
    <label>@Message</label>
</CustomDiv>

<CustomDiv Class="divCard1 border"
            Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "lblScreenName")?.IsVisible)"
            DivType="3">
    <div class="divChildCard1">
        <h3>@SystemScreenName</h3>
    </div>
</CustomDiv>

<div class="customContainer">

    @if (items?.Count() > 0)
    {
        <CustomDiv Class="divCard1">
            <CustomDiv Class="divCard2"
                       Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtSearch")?.IsVisible)">
                <div class="divChildCard1">
                    <label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtSearch")?.Name</label>
                </div>
                <div class="divChildCard1">
                    <input @bind="filter" @bind:event="oninput" @bind:after="FilterItems" />
                </div>
            </CustomDiv>
            
            <QuickGrid Items="@filteredItems">
                @foreach (var field in fieldsList)
                {
                    @if (field.IsVisible)
                    {
                        switch (field.Xname)
                        {
                            case "gridCol_ButtonEdit":
                                <TemplateColumn Title="@field.Name">
                                    <div>
                                        <button class="btn btn-outline-info" @onclick="@(() => 
                                             EditItem(context.SystemScreenFieldId))">
                                            @field.Name
                                        </button>
                                    </div>
                                </TemplateColumn>
                                break;
                            case "gridCol_SystemScreenFieldId":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.SystemScreenFieldId)" />
                                break;
                            case "gridCol_SystemScreenId":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.SystemScreenId)" />
                                break;
                            case "gridCol_Name":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.Name)" />
                                break;
                            case "gridCol_IsActive":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.IsActive)" />
                                break;
                            case "gridCol_CreateDate":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.CreateDate)" />
                                break;
                            case "gridCol_Xname":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.Xname)" />
                                break;
                            case "gridCol_FieldTypeName":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.FieldTypeName)" />
                                break;
                            case "gridCol_IsVisible":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.IsVisible)" />
                                break;
                            case "gridCol_IsDisabled":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.IsDisabled)" />
                                break;
                            case "gridCol_ModelField":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.ModelField)" />
                                break;
                            case "gridCol_ValidationId":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.ValidationId)" />
                                break;
                            case "gridCol_ValidationMessage":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.ValidationMessage)" />
                                break;
                            case "grid_Col_PresentationSequence":
                                <PropertyColumn Sortable="true" Title="@field.Name" Property="@(p => p.PresentationSequence)" />
                                break;
                            default:
                                break;
                        }
                    }
                }
            </QuickGrid>
        </CustomDiv>
    }
    else
    {
        <label>Loading...</label>
    }

    <EditForm Class="customContainer" Model="selectedScreenField" OnValidSubmit="Submit">
        <CustomDiv Class="divCard1"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtName")?.IsVisible)"
                   Id="txtName">
            <div class="divChildCard1">
                <label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtName")?.Name</label>
            </div>
            <div class="divChildCard1">
                <CustomInput Type="text"
                             TextAlign="center"
                             Width="100"
                             Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtName")?.IsDisabled)"
                             @bind-Value="selectedScreenField.Name" />
            </div>
            <div class="divChildCard1">
                <label>@validator?.FirstOrDefault(p => p.PropertyName == "Name")?.ValidationMessage</label>
            </div>
        </CustomDiv>

        <CustomDiv Class="divCard2"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtValidationMessage")?.IsVisible)">
            <div class="divChildCard1">
                <label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtValidationMessage")?.Name</label>
            </div>
            <div class="divChildCard1">
                <CustomInput Type="text"
                             TextAlign="center"
                             Width="100"
                             Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtValidationMessage")?.IsDisabled)"
                             @bind-Value="selectedScreenField.ValidationMessage" />
            </div>
            <div class="divChildCard1">
                <label>@validator?.FirstOrDefault(p => p.PropertyName == "ValidationMessage")?.ValidationMessage</label>
            </div>
        </CustomDiv>

        <CustomDiv Class="divCard2"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtValidationId")?.IsVisible)"
                   Align="center">

            <div class="divChildCard1">
                <label>@(fieldsList?.FirstOrDefault(p => p.Xname == "txtValidationId")?.Name)</label>
            </div>
            <div class="divChildCard1">
                <CustomInput Type="dropdown"
                             TextAlign="center"
                             Width="35"
                             Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtValidationId")?.IsDisabled)"
                             Dropdownitems="dropDownValidation"
                             SelectedDropdownItem="selectedValidation"
                             @bind-ValueInt="selectedScreenField.ValidationId" />
            </div>
            <div class="divChildCard1">
                <label>@validator?.FirstOrDefault(p => p.PropertyName == "ValidationId")?.ValidationMessage</label>
            </div>
        </CustomDiv>

        
        <CustomDiv Class="divCard4"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtPresentationSequence")?.IsVisible)">
            <div class="divChildCard1">
                <label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtPresentationSequence")?.Name</label>
            </div>
            <div class="divChildCard1">
                <CustomInput Type="number"
                             TextAlign="center"
                             Width="100"
                             Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtPresentationSequence")?.IsDisabled)"
                             @bind-ValueInt="selectedScreenField.PresentationSequence" />
            </div>
            <div class="divChildCard1">
                <label>@validator?.FirstOrDefault(p => p.PropertyName == "PresentationSequence")?.ValidationMessage</label>
            </div>
        </CustomDiv>

        <CustomDiv Class="divCard4"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsVisible")?.IsVisible)"
                   Align="center">
            <div class="divChildCard1">
                <label>@fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsVisible")?.Name</label>
            </div>
            <div class="divChildCard1">
                <CustomInput Type="checkbox"
                             TextAlign="center"
                             Width="100"
                             Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsVisible")?.IsDisabled)"
                             @bind-ValueBool="selectedScreenField.IsVisible" />
            </div>
            <div class="divChildCard1">
                <label>@validator?.FirstOrDefault(p => p.PropertyName == "IsVisible")?.ValidationMessage</label>
            </div>
        </CustomDiv>

        <CustomDiv Class="divCard4"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsDisabled")?.IsVisible)"
                   Align="center">
            <div class="divChildCard1">
                <label>@fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsDisabled")?.Name</label>
            </div>
            <div class="divChildCard1">
                <CustomInput Type="checkbox"
                             TextAlign="center"
                             Width="100"
                             Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsDisabled")?.IsDisabled)"
                             @bind-ValueBool="selectedScreenField.IsDisabled" />
            </div>
            <div class="divChildCard1">
                <label>@validator?.FirstOrDefault(p => p.PropertyName == "IsDisabled")?.ValidationMessage</label>
            </div>
        </CustomDiv>

        <CustomDiv Class="divCard4"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsActive")?.IsVisible)"
                   Align="center">
            <div class="divChildCard1">
                <label>@fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsActive")?.Name</label>
            </div>
            <div class="divChildCard1">
                <CustomInput Type="checkbox"
                             TextAlign="center"
                             Width="100"
                             Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "cbxIsActive")?.IsDisabled)"
                             @bind-ValueBool="selectedScreenField.IsActive" />
            </div>
            <div class="divChildCard1">
                <label>@validator?.FirstOrDefault(p => p.PropertyName == "IsActive")?.ValidationMessage</label>
            </div>
        </CustomDiv>

        <CustomDiv Class="divCard1"
                   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "btnSave")?.IsVisible)"
                   Align="center">
            <div class="divChildCard1">
                <button type="submit" class="btn btn-primary">@fieldsList?.FirstOrDefault(p => p.Xname == "btnSave")?.Name</button>
            </div>
        </CustomDiv>
    </EditForm>

</div>


@code {

    [Parameter] public int Id { get; set; }
    [Parameter] public string? SystemScreenName { get; set; }

    public SystemScreenField selectedScreenField { get; set; } = new SystemScreenField();

    public IQueryable<SystemScreenField> items { get; set; }
    public IQueryable<SystemScreenField> filteredItems { get; set; }
    public string filter { get; set; } = "";

    private SystemScreen screen { get; set; }
    private List<SystemScreenField> fieldsList { get; set; }
    private List<ValidatorModel>? validator { get; set; }

    private List<DropdownListItems>? dropDownValidation { get; set; }
    private DropdownListItems? selectedValidation { get; set; }
    //Message
    private string? Message { get; set; } = "";
    private bool IsVisible { get; set; } = false;
    private int DivType { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var itemlist = await _ws.Get("GetTableByParentId", $"SystemScreen/SystemScreenField/{Id.ToString()}");
        items = filteredItems = JsonConvert.DeserializeObject<List<SystemScreenField>>(itemlist).AsQueryable();
        (dropDownValidation, selectedValidation) = await GlobalHelper.DropDownList(_ws, "Validation", selectedScreenField.ValidationId);
        (fieldsList, screen) = await GlobalHelper.GetScreenFields(_ws, "SystemScreenFieldMaitenancePage"); //ToChange
    }

    private void FilterItems()
    {
        filteredItems = items;
        filteredItems = string.IsNullOrEmpty(filter) == false ? filteredItems.Where(p => p.Name.ToLower().Contains(filter.ToLower())) : filteredItems;
    }

    private void EditItem(int systemscreenfieldid)
    {
        selectedScreenField = items.FirstOrDefault(p => p.SystemScreenFieldId == systemscreenfieldid);
        _js.InvokeVoidAsync("scrollAndFocus", "txtName","down");
        selectedValidation = new DropdownListItems 
        { 
            Value = selectedScreenField.ValidationId, 
            Description = dropDownValidation.FirstOrDefault(p => p.Value == selectedScreenField.ValidationId).Description
        };
        StateHasChanged();
    }

    private async Task SetMessageProperties(string msg, bool isVisible, int divType)
    {
        Message = msg;
        IsVisible = isVisible;
        DivType = divType;
        StateHasChanged();

        await _js.InvokeVoidAsync("scrollAndFocus", "lblErrorMessage", "up");
        await Task.Delay(3000);

        Message = string.Empty;
        IsVisible = false;
        DivType = 0;
        StateHasChanged();
    }

    public async Task Submit()
    {
        validator = _vh.Validate(selectedScreenField, fieldsList);
        if (validator.Count() == 0)
        {
            try
            {
                if (selectedScreenField != null)
                {
                    if (Id != 0)
                    {
                        await _ws.Put("PutObject", "SystemScreenField", JsonConvert.SerializeObject(selectedScreenField));
                    }
                    else
                    {
                        await _ws.Post("PostObject", "SystemScreenField", JsonConvert.SerializeObject(selectedScreenField));
                    }
                }
                await SetMessageProperties("Salvo", true, 2);
                selectedScreenField = new SystemScreenField();
            }
            catch (Exception e)
            {
                await SetMessageProperties("Erro", true, 1);
            }
        }
    }
    
}
