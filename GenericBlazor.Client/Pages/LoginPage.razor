@page "/LoginPage"

@layout NoneLayout

@rendermode InteractiveAuto
@attribute [StreamRendering]

<div style="height:100vh" class="customContainer">

	<div style="background-image: url('images/praia.jpeg');width:48%;">

	</div>
	<EditForm style="width:48%; align-items:center;justify-content:center;margin:auto;" class="customContainer border" Model="users" OnValidSubmit="Submit">

		<CustomDiv Visible="@IsVisible" DivType="@DivType" Class="divCard1">
			<label class="divChildCard1">@Message</label>
		</CustomDiv>

		<CustomDiv Class="divCard1"
				   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtName")?.IsVisible)"
				   Align="center">

			<div class="divChildCard1">
				<label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtName")?.Name</label>
			</div>
			<div class="divChildCard1">
				<CustomInput Type="text"
							 TextAlign="center"
							 Width="40"
							 Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtName")?.IsDisabled)"
							 @bind-Value="users.Name" />
			</div>
			<div class="divChildCard1">
				<label>@validator?.FirstOrDefault(p => p.PropertyName == "Name")?.ValidationMessage</label>
			</div>
		</CustomDiv>

		<CustomDiv Class="divCard1"
				   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtEmail")?.IsVisible)"
				   Align="center">

			<div class="divChildCard1">
				<label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtEmail")?.Name</label>
			</div>
			<div class="divChildCard1">
				<CustomInput Type="text"
							 TextAlign="center"
							 Width="40"
							 Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtEmail")?.IsDisabled)"
							 @bind-Value="users.Email" />
			</div>
			<div class="divChildCard1">
				<label>@validator?.FirstOrDefault(p => p.PropertyName == "Email")?.ValidationMessage</label>
			</div>
		</CustomDiv>

		<CustomDiv Class="divCard1"
				   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtPhoneNumber")?.IsVisible)"
				   Align="center">

			<div class="divChildCard1">
				<label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtPhoneNumber")?.Name</label>
			</div>
			<div class="divChildCard1">
				<CustomInput Type="text"
							 TextAlign="center"
							 Width="40"
							 Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtPhoneNumber")?.IsDisabled)"
							 @bind-Value="users.PhoneNumber" />
			</div>
			<div class="divChildCard1">
				<label>@validator?.FirstOrDefault(p => p.PropertyName == "PhoneNumber")?.ValidationMessage</label>
			</div>
		</CustomDiv>

		<CustomDiv Class="divCard1"
				   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtPassword")?.IsVisible)"
				   Align="center">

			<div class="divChildCard1">
				<label>@fieldsList?.FirstOrDefault(p => p.Xname == "txtPassword")?.Name</label>
			</div>
			<div class="divChildCard1">
				<CustomInput Type="text"
							 Width="40"
							 Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "txtPassword")?.IsDisabled)"
							 @bind-Value="users.Password" />
			</div>
			<div class="divChildCard1">
					<label>@validator?.FirstOrDefault(p => p.PropertyName == "Password")?.ValidationMessage</label>
			</div>
		</CustomDiv>

		<CustomDiv Class="divCard1"
			   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "cbxStaySigned")?.IsVisible)"
			   Align="center">

			<div class="divChildCard1">
			<label>@fieldsList?.FirstOrDefault(p => p.Xname == "cbxStaySigned")?.Name</label>
			</div>
			<div class="divChildCard1">
				<CustomInput Type="checkbox"
							 Width="40"
							 Disabled="@(fieldsList?.FirstOrDefault(p => p.Xname == "cbxStaySigned")?.IsDisabled)"
							 @bind-ValueBool="users.StaySigned" />
			</div>
			<div class="divChildCard1">
				<label>@validator?.FirstOrDefault(p => p.PropertyName == "StaySigned")?.ValidationMessage</label>
			</div>
		</CustomDiv>

		<CustomDiv Class="divCard1"
				   Visible="@(fieldsList?.FirstOrDefault(p => p.Xname == "btnLogin")?.IsVisible)"
				   Align="center">
			<div class="divChildCard1">
				<button class="btn btn-primary" type="submit">@fieldsList?.FirstOrDefault(p => p.Xname == "btnLogin")?.Name</button>
			</div>
		</CustomDiv>

	</EditForm>
</div>


@code {

	public Users users { get; set; } = new Users();

	private SystemScreen? screen { get; set; }
	private List<SystemScreenField>? fieldsList { get; set; }
	private List<ValidatorModel>? validator { get; set; }

	private string? Message { get; set; } = "";
	private bool IsVisible { get; set; } = false;
	private int DivType { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		string screenJson = await _ws.Get("GetTableByName", $"SystemScreen/LoginPage");
		SetMessageProperties(screenJson,true,1);
		if (screenJson != null && screenJson != "")
		{
			screen = JsonConvert.DeserializeObject<SystemScreen>(screenJson);
			if (screen != null)
			{
				var screenfieldsJson = await _ws.Get("GetTableByParentId", $"SystemScreen/SystemScreenField/{screen.SystemScreenId.ToString()}");
				if (screenfieldsJson != null && screenfieldsJson != "")
				{
					fieldsList = JsonConvert.DeserializeObject<List<SystemScreenField>>(screenfieldsJson);
				}
			}
		}
	}

	public async Task Submit()
	{
		validator = _vh.Validate(users, fieldsList);
		if (validator.Count() == 0)
		{
			try
			{
				if (!string.IsNullOrEmpty(users.Password))
				{
					var result = await _ws.Get("GetJsonDataFromProcedure/usp_login", $"'{users.Name}','{users.Password}','{(users.StaySigned == true ? 1 : 0)}'");
					var response = JsonConvert.DeserializeObject<ApiResponse>(result);

					if (response?.ReturnId == 1)
					{
						var user = JsonConvert.DeserializeObject<Users>(response.Message);

						await _userManager.SetCurrentUser(user);
						
						await _userManager.SetCookie(_js, response.Message, (user.StaySigned ? 30 : 1),"Users");

						SetMessageProperties("Salvo", true, 2);
						_navig.NavigateTo($"/");
					}
					else
					{
						SetMessageProperties(response.Message, true, 1);
					}
				}
				else
				{
					SetMessageProperties("Senha não pode ser vazia!", true, 1);
					return;
				}
			}
			catch (Exception e)
			{
				SetMessageProperties("Erro", true, 1);
			}
		}
	}

	public void SetMessageProperties(string msg, bool isVisible, int divType)
	{
		Message = msg;
		IsVisible = isVisible;
		DivType = divType;
	}

}
